"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SQLServer = void 0;
const native_1 = require("@cubejs-backend/native");
const shared_1 = require("@cubejs-backend/shared");
const crypto = __importStar(require("crypto"));
class SQLServer {
    constructor(apiGateway) {
        this.apiGateway = apiGateway;
        this.sqlInterfaceInstance = null;
        native_1.setLogLevel(process.env.CUBEJS_LOG_LEVEL === 'trace' ? 'trace' : 'warn');
    }
    async init(options) {
        if (this.sqlInterfaceInstance) {
            throw new Error('Unable to start SQL interface two times');
        }
        const checkSqlAuth = (options.checkSqlAuth && this.wrapCheckSqlAuthFn(options.checkSqlAuth))
            || this.createDefaultCheckSqlAuthFn(options);
        this.sqlInterfaceInstance = await native_1.registerInterface({
            port: options.sqlPort,
            nonce: options.sqlNonce,
            checkAuth: async ({ request, user }) => {
                const { password } = await checkSqlAuth(request, user);
                // Strip securityContext to improve speed deserialization
                return {
                    password
                };
            },
            meta: async ({ request, user }) => {
                // @todo Store security context in native
                const { securityContext } = await checkSqlAuth(request, user);
                const context = await this.apiGateway.contextByReq(request, securityContext, request.id);
                // eslint-disable-next-line no-async-promise-executor
                return new Promise(async (resolve, reject) => {
                    try {
                        await this.apiGateway.meta({
                            context,
                            res: (message) => {
                                resolve(message);
                            },
                        });
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            },
            load: async ({ request, user, query }) => {
                // @todo Store security context in native
                const { securityContext } = await checkSqlAuth(request, user);
                const context = await this.apiGateway.contextByReq(request, securityContext, request.id);
                // eslint-disable-next-line no-async-promise-executor
                return new Promise(async (resolve, reject) => {
                    try {
                        await this.apiGateway.load({
                            query,
                            queryType: 'multi',
                            context,
                            res: (message) => {
                                resolve(message);
                            },
                        });
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            },
        });
    }
    wrapCheckSqlAuthFn(checkSqlAuth) {
        return async (req, user) => {
            const response = await checkSqlAuth(req, user);
            if (typeof response !== 'object' || response.password === null) {
                throw new Error('checkSqlAuth must return an object');
            }
            if (!response.password) {
                throw new Error('checkSqlAuth must return an object with password field');
            }
            return response;
        };
    }
    createDefaultCheckSqlAuthFn(options) {
        let allowedUser = options.sqlUser || shared_1.getEnv('sqlUser');
        let allowedPassword = options.sqlPassword || shared_1.getEnv('sqlPassword');
        if (!shared_1.getEnv('devMode')) {
            if (!allowedUser) {
                allowedUser = 'cube';
                shared_1.displayCLIWarning('Option sqlUser is required in production mode. Cube.js will use \'cube\' as a default username.');
            }
            if (!allowedPassword) {
                allowedPassword = crypto.randomBytes(16).toString('hex');
                shared_1.displayCLIWarning(`Option sqlPassword is required in production mode. Cube.js has generated it as '${allowedPassword}'`);
            }
        }
        return async (req, user) => {
            if (allowedUser && user !== allowedUser) {
                throw new Error('Incorrect user name or password');
            }
            return {
                password: allowedPassword,
                securityContext: {}
            };
        };
    }
    async close() {
        // @todo Implement
    }
}
exports.SQLServer = SQLServer;
//# sourceMappingURL=sql-server.js.map